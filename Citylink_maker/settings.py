"""
Django settings for Citylink_maker project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
import os
import sys
from pathlib import Path
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 如果你要把子应用都放在apps文件夹内，就需要写这个
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extar_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e*+k%^5_5+)ky45rkvx0d=$81lp%!6o#epz()3_n)=f3pt*250'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # True是测试阶段，logo不会显示，要改为False上线阶段logo才能显示
# DEBUG = False  # True是测试阶段，logo不会显示，要改为False上线阶段logo才能显示

# ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = ['云服务器外网ip', '云服务器内网ip', '域名', 'localhost', '0.0.0.0:8000', '127.0.0.1', ]

# Application definition

INSTALLED_APPS = [
    'simpleui',  # 注册需要放在admin前面，美化admin后台
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # 注册cors，用于解决跨域问题
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器上传图片模块
    'django_filters',  # 注册过滤工具包
    'drf_multiple_model',  # 多模型序列化组件
    'rest_framework',  # 调试用
    'django_crontab',  # 定时任务
    'users',  # 用户登录注册模块
    'users_options',  # 用户个人信息模块
    'OAuth',  # 第三方登录模块
    'goods',  # 商品信息模块
    'shopcart',  # 购物车订单模块
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # 安全中间件
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话中间件
    'django.middleware.common.CommonMiddleware',  # 通用中间件
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF 保护中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 认证中间件
    'django.contrib.messages.middleware.MessageMiddleware',  # 消息中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # X-Frame-Options 中间件
    'corsheaders.middleware.CorsMiddleware',  # cors的中间件配置
]

ROOT_URLCONF = 'Citylink_maker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Citylink_maker.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# 数据库的设置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        # 'HOST': '127.0.0.1',  # 主机号
        'HOST': '云服务器外网ip',  # 主机号
        'PORT': 3306,  # 端口号
        # 'USER': 'root',  # 数据库用户名
        'USER': 'citylink',  # 数据库用户名
        'PASSWORD': '123456',  # 数据库密码
        'NAME': 'citylink',  # 你新建的数据库的库名
        # 'ATOMIC_REQUESTS': True,  # 全局开启事务，绑定的是http请求响应整个过程
        # 正常情况下不需要开启全局事务，因为很多操作并不需要，比较浪费资源。
    }
}

# Redis缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # 指定存储方式为混合存储
SESSION_CACHE_ALIAS = 'session'  # 指定session使用的默认缓存库

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 将语言设置为中文

TIME_ZONE = 'Asia/Shanghai'  # 设置为中国北京时间

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 应用UTC时区

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 静态图片
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 自己定义的认证
AUTH_USER_MODEL = 'users.UserProfile'

# 用日志来进行记录错误之类的信息
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/Citylink_maker.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# 做一个白名单设置，可以进行跨域访问
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1',  # 本地的地址
    'http://localhost',  # 本地的地址
    'http://云服务器外网ip',  # 云服务器的公网地址
    # 'http://192.168.80.136',      # 我虚拟机的地址
    # 'http://www.abc.com',         # 前端的域名
    'http://域名',  # 后端的域名
)

CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

# jwt的配置信息
REST_FRAMEWORK = {
    # 添加jwt验证类
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',

    )
}
# jwt设置
JWT_AUTH = {
    # 指明token的有效期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),

    # 修改了配置文件
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',
}
# jwt改写验证登录
AUTHENTICATION_BACKENDS = {
    'users.utils.UsernameMobileAuthBackend',  # 自定义手机号密码登陆
    # 'django.contrib.auth.backends.ModelBackend'  # 默认的验证登陆
    # 'social_core.backends.weibo.WeiboOAuth2',  # 第三方登录
}

# 设置admin中的图片logo位置
SIMPLEUI_LOGO = 'http://127.0.0.1:8000/static/logo/logo1.png'
# SIMPLEUI_LOGO = 'http://云服务器外网ip:8000/static/logo/logo1.png'
SIMPLEUI_HOME_INFO = False  # 关闭包自带的广告

# 富文本编辑器的配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',  # 工具条功能
        # 'toolbar': 'advanced',  # 工具条功能
        'height': 300,  # 编辑器高度
        # 'width': 300,  # 编辑器宽
    },
}
# 上传图片保存路径，如果使用了云存储服务，则此处值为空即可
CKEDITOR_UPLOAD_PATH = ''

# qq的配置参数，QQ互联通过后的应用的APP ID和APP Key
QQ_CLIENT_ID = 'xxxxxxxxx'  # 应用的APP ID
QQ_CLIENT_SECRET = 'xxxxxxxxxxxxxx'  # 应用的APP Key
QQ_REDIRECT_URI = '自己在QQ官方定义的返回url'

# 支付宝支付配置，支付宝开放平台-沙箱应用配置
# 应用ID
ALIPAY_APPID = 'xxxxxxxxxxxxxxx'
'''
可以去虚拟机获取，打开openssl
输入（获取私钥）：genrsa -out app_private_key.pem 2048
输入（获取公钥）：rsa -in app_private_key.pem -pubout -out app_public_key.pem
公钥拿到后去支付宝开放平台获取支付宝公钥
'''
# 应用私钥
app_private_key_string = open(os.path.join(BASE_DIR, 'apps/shopcart/keys/app_private_key.pem'), 'r').read()
# 支付宝的公钥
alipay_public_key_string = open(os.path.join(BASE_DIR, 'apps/shopcart/keys/alipay_public_key.pem'), 'r').read()
# 请求的支付宝平台的接口，支付宝网关地址
ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'
# 支付完成后返回的路由，自定义回首页
# ALIPAY_RETURN_URL = 'http://127.0.0.1'
# ALIPAY_RETURN_URL = 'http://云服务器外网ip'
ALIPAY_RETURN_URL = 'http://域名'

# 定时任务的配置
"""
*  *  *  *  *
分 时 日 月 周
定时任务的命令：
python manage.py crontab add        # 增加定时任务（重复增加会覆盖前一个任务）
python manage.py crontab show       # 显示定时任务
python manage.py crontab remove     # 删除定时任务
"""
CRONJOBS = [
    # 每5分钟执行一次生成主页静态文件
    ('*/5 * * * *', 'goods.crons.generate_static_index_html', '>> /home/Citylink_maker/logs/crontab.log')
]
# 解决中文异常问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'
